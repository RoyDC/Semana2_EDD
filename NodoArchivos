#include <iostream>
#include <string>
#include <vector>
#include <cstddef> 
using namespace std;


struct Proceso {
    int id;
    string nombre;
    int prioridad;
};

struct NodoProceso {
    Proceso dato;
    NodoProceso* siguiente;
};

struct NodoMemoria {
    string direccion;
    int tama;
    NodoMemoria* siguiente;
};

struct Archivo {
    string nombre;
    int tama;
};

struct NodoArchivo {
    Archivo dato;
    NodoArchivo* siguiente;
};


NodoProceso* listaProcesos = NULL;
NodoProceso* colaPrioridad = NULL;
NodoMemoria* pilaMemoria = NULL;
NodoArchivo* listaArchivos = NULL;




void insertarProceso(Proceso p) {
    NodoProceso* nuevo = new NodoProceso{p, NULL};
    if (!listaProcesos) {
        listaProcesos = nuevo;
    } else {
        NodoProceso* actual = listaProcesos;
        while (actual->siguiente)
            actual = actual->siguiente;
        actual->siguiente = nuevo;
    }
}

void encolarProceso(Proceso p) {
    NodoProceso* nuevo = new NodoProceso{p, NULL};
    if (!colaPrioridad || p.prioridad < colaPrioridad->dato.prioridad) {
        nuevo->siguiente = colaPrioridad;
        colaPrioridad = nuevo;
    } else {
        NodoProceso* actual = colaPrioridad;
        while (actual->siguiente && actual->siguiente->dato.prioridad <= p.prioridad)
            actual = actual->siguiente;
        nuevo->siguiente = actual->siguiente;
        actual->siguiente = nuevo;
    }
}


void pushMemoria(string direccion, int tama) {
    NodoMemoria* nuevo = new NodoMemoria{direccion, tama, pilaMemoria};
    pilaMemoria = nuevo;
}

void popMemoria() {
    if (pilaMemoria) {
        NodoMemoria* temp = pilaMemoria;
        pilaMemoria = pilaMemoria->siguiente;
        delete temp;
        cout << "Bloque desapilado.\n";
    } else {
        cout << "Pila vacía.\n";
    }
}


void insertarArchivo(Archivo a) {
    NodoArchivo* nuevo = new NodoArchivo{a, NULL};
    if (!listaArchivos) {
        listaArchivos = nuevo;
    } else {
        NodoArchivo* actual = listaArchivos;
        while (actual->siguiente)
            actual = actual->siguiente;
        actual->siguiente = nuevo;
    }
}

void ordenarArchivosBurbuja() {
    if (!listaArchivos) return;
    bool cambiado;
    do {
        cambiado = false;
        NodoArchivo* actual = listaArchivos;
        while (actual->siguiente) {
            if (actual->dato.nombre > actual->siguiente->dato.nombre) {
                swap(actual->dato, actual->siguiente->dato);
                cambiado = true;
            }
            actual = actual->siguiente;
        }
    } while (cambiado);
}

vector<Archivo> listaAArreglo() {
    vector<Archivo> arreglo;
    NodoArchivo* actual = listaArchivos;
    while (actual) {
        arreglo.push_back(actual->dato);
        actual = actual->siguiente;
    }
    return arreglo;
}

int busquedaBinaria(vector<Archivo>& archivos, string objetivo) {
    int inicio = 0, fin = archivos.size() - 1;
    while (inicio <= fin) {
        int medio = (inicio + fin) / 2;
        if (archivos[medio].nombre == objetivo)
            return medio;
        else if (archivos[medio].nombre < objetivo)
            inicio = medio + 1;
        else
            fin = medio - 1;
    }
    return -1;
}


int main() {
    int opcion;
    do {
        cout << "\n====== MENÚ DEL SISTEMA ======\n";
        cout << "1. Insertar proceso\n";
        cout << "2. Encolar proceso por prioridad\n";
        cout << "3. Push bloque de memoria\n";
        cout << "4. Pop bloque de memoria\n";
        cout << "5. Insertar archivo\n";
        cout << "6. Ordenar archivos\n";
        cout << "7. Buscar archivo\n";
        cout << "8. Salir\n";
        cout << "Opcion: ";
        cin >> opcion;

        if (opcion == 1) {
            Proceso p;
            cout << "ID: "; cin >> p.id;
            cout << "Nombre: "; cin >> p.nombre;
            cout << "Prioridad: "; cin >> p.prioridad;
            insertarProceso(p);
            cout << "Proceso insertado.\n";

        } else if (opcion == 2) {
            Proceso p;
            cout << "ID: "; cin >> p.id;
            cout << "Nombre: "; cin >> p.nombre;
            cout << "Prioridad: "; cin >> p.prioridad;
            encolarProceso(p);
            cout << "Proceso encolado.\n";

        } else if (opcion == 3) {
            string dir; int tam;
            cout << "Dirección: "; cin >> dir;
            cout << "Tamaño: "; cin >> tam;
            pushMemoria(dir, tam);
            cout << "Bloque apilado.\n";

        } else if (opcion == 4) {
            popMemoria();

        } else if (opcion == 5) {
            Archivo a;
            cout << "Nombre archivo: "; cin >> a.nombre;
            cout << "Tamaño: "; cin >> a.tama;
            insertarArchivo(a);
            cout << "Archivo insertado.\n";

        } else if (opcion == 6) {
            ordenarArchivosBurbuja();
            cout << "Archivos ordenados.\n";

        } else if (opcion == 7) {
            ordenarArchivosBurbuja(); 
            vector<Archivo> arr = listaAArreglo();
            string nombre;
            cout << "Archivo a buscar: "; cin >> nombre;
            int pos = busquedaBinaria(arr, nombre);
            if (pos != -1)
                cout << "Archivo encontrado en posición " << pos << endl;
            else
                cout << "Archivo no encontrado.\n";
        }

    } while (opcion != 8);

    cout << "Fin del programa.\n";
    return 0;
}
